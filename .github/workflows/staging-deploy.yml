name: Deploy to Staging

on:
  push:
    branches: [staging]
  workflow_dispatch:

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push staging image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/envoyou-sec-api:staging
            ${{ secrets.DOCKER_USERNAME }}/envoyou-sec-api:staging-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to staging server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            PROJECT_DIR="$HOME/envoyou-staging"
            REPO_URL="git@github.com:ENVOYou/envoyou-sec-api-v1.git"

            # Cek jika folder sudah ada atau belum
            if [ -d "$PROJECT_DIR" ]; then
              echo "Project directory exists. Pulling latest changes..."
              cd $PROJECT_DIR
              git pull origin staging
            else
              echo "Project directory does not exist. Cloning repository..."
              git clone $REPO_URL $PROJECT_DIR
            fi
     
            # Buat file .env di LOKASI YANG PASTI
            echo "Creating .env file..."
            cat <<EOF > "$PROJECT_DIR/.env"
            DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
            DATABASE_URL=${{ secrets.STAGING_DATABASE_URL }}
            REDIS_URL=${{ secrets.STAGING_REDIS_URL }}
            SECRET_KEY=${{ secrets.STAGING_SECRET_KEY }}
            CORS_ORIGINS=${{ secrets.STAGING_CORS_ORIGINS }}
            EPA_API_KEY=${{ secrets.EPA_API_KEY }}
            GRAFANA_ADMIN_PASSWORD=${{ secrets.GRAFANA_ADMIN_PASSWORD }}
            JWT_ALGORITHM=${{ secrets.STAGING_JWT_ALGORITHM }}
            EOF

            # Jalankan docker compose dengan path absolut ke file dan direktori proyek
            echo "Restarting services with docker compose..."
            docker compose --project-directory "$PROJECT_DIR" -f "$PROJECT_DIR/docker-compose.staging.yml" up -d --pull always --force-recreate

            echo "Waiting for services to be ready..."
            sleep 15 

            # Jalankan migrasi dengan path absolut juga
            echo "Running database migrations..."
            docker compose --project-directory "$PROJECT_DIR" -f "$PROJECT_DIR/docker-compose.staging.yml" exec -T api alembic upgrade head

            echo "Final health check..."
            sleep 5
            curl -f http://localhost:8000/health || exit 1

            echo "Deployment successful!"

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}

        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
