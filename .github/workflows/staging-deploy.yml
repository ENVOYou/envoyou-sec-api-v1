name: Deploy to Staging

on:
  push:
    branches: [staging]
  workflow_dispatch:

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push staging image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/envoyou-sec-api:staging
            ${{ secrets.DOCKER_USERNAME }}/envoyou-sec-api:staging-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to staging server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            #!/bin/bash
            set -euo pipefail

            # --- Konfigurasi ---
            PROJECT_DIR="$HOME/envoyou-staging"
            REPO_URL="git@github.com:ENVOYou/envoyou-sec-api-v1.git"
            COMPOSE_FILE="docker-compose.staging.yml"

            # --- Fungsi Bantuan ---
            log() {
                echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1"
            }

            retry() {
                local max_attempts=5
                local timeout=2
                local attempt=0
                local exitCode=0

                while (( attempt < max_attempts )); do
                    if "$@"; then
                        return 0
                    fi
                    exitCode=$?
                    log "‚ö†Ô∏è Perintah gagal! Mencoba lagi dalam $timeout detik..."
                    sleep $timeout
                    attempt=$((attempt + 1))
                    timeout=$((timeout * 2))
                done
                return $exitCode
            }

            wait_for_health() {
                local service_name=$1
                local health_url=$2
                local max_attempts=30
                local attempt=0

                log "‚è≥ Menunggu $service_name agar siap..."
                while (( attempt < max_attempts )); do
                    if curl -fsS --max-time 10 "$health_url" > /dev/null 2>&1; then
                        log "‚úÖ $service_name sudah sehat!"
                        return 0
                    fi
                    sleep 10
                    attempt=$((attempt + 1))
                done
                log "‚ùå $service_name gagal menjadi sehat setelah beberapa kali percobaan."
                return 1
            }

            # --- Fungsi Utama ---
            main() {
                log "üöÄ Memulai proses deployment..."

                # 1. Login ke Docker Hub
                log "üîê Melakukan login ke Docker Hub..."
                echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

                # 2. Update repository
                log "üì• Mengupdate repository dari Git..."
                if [[ -d "$PROJECT_DIR" ]]; then
                    cd "$PROJECT_DIR"
                    git fetch --all && git reset --hard origin/staging
                else
                    git clone "$REPO_URL" "$PROJECT_DIR"
                    cd "$PROJECT_DIR"
                fi

                # 3. Buat file .env
                log "üìù Membuat file .env..."
                cat <<EOF > .env
            DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
            DATABASE_URL=${{ secrets.STAGING_DATABASE_URL }}
            REDIS_URL=${{ secrets.STAGING_REDIS_URL }}
            SECRET_KEY=${{ secrets.STAGING_SECRET_KEY }}
            CORS_ORIGINS=${{ secrets.STAGING_CORS_ORIGINS }}
            EPA_API_KEY=
            GRAFANA_ADMIN_PASSWORD=${{ secrets.GRAFANA_ADMIN_PASSWORD }}
            JWT_ALGORITHM=${{ secrets.STAGING_JWT_ALGORITHM }}
            EOF
                log "üîí Mengamankan file .env..."
                chmod 600 .env

                # 4. Hentikan dan bersihkan kontainer lama
                log "üõë Menghentikan dan membersihkan kontainer lama..."
                docker compose -f "$COMPOSE_FILE" down --volumes --remove-orphans || true

                # 5. Tarik image baru dengan retry
                log "üì¶ Menarik image Docker terbaru..."
                retry docker compose -f "$COMPOSE_FILE" pull

                # 6. Jalankan layanan
                log "üîÑ Menjalankan layanan baru..."
                docker compose -f "$COMPOSE_FILE" up -d --force-recreate

                # 7. Tunggu API siap
                wait_for_health "API" "http://localhost:8000/health"

                # 8. Jalankan migrasi database
                log "üóÑÔ∏è Menjalankan migrasi database..."
                retry docker compose -f "$COMPOSE_FILE" exec -T api alembic upgrade head

                # 9. Lakukan pengecekan kesehatan akhir
                log "üè• Melakukan pengecekan kesehatan akhir untuk semua layanan..."
                wait_for_health "API" "http://localhost:8000/health"
                wait_for_health "Prometheus" "http://localhost:9090/-/healthy"
                wait_for_health "Grafana" "http://localhost:3000/api/health"

                log "‚úÖ Deployment selesai dengan sukses!"
            }

            # --- Eksekusi ---
            trap 'log "‚ùå Deployment gagal di baris $LINENO"' ERR
            main

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}

        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
