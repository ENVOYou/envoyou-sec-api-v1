name: CI/CD Pipeline

on:
  push:
    branches: [main, staging]
  pull_request:
    branches: [main, staging]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: timescale/timescaledb:latest-pg15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: envoyou_sec_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install pytest pytest-asyncio pytest-cov

      - name: Create test environment file
        run: |
          cat > .env << EOF
          DATABASE_URL=postgresql://postgres:postgres@localhost:5432/envoyou_sec_test
          REDIS_URL=redis://localhost:6379/0
          SECRET_KEY=test-secret-key-for-ci
          ENVIRONMENT=testing
          EOF

      # Environment variables now set at job level above

      - name: Run database migrations
        run: |
          python3 -c "
import os
from alembic.config import Config
from alembic import command

# Load environment from .env file
with open('.env', 'r') as f:
   for line in f:
       if '=' in line:
           key, value = line.strip().split('=', 1)
           os.environ[key] = value

# Run migration
alembic_cfg = Config('alembic.ini')
command.upgrade(alembic_cfg, 'head')
print('Database migration completed successfully!')
"

      - name: Run tests with coverage
        run: |
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Lint with flake8
        run: |
          flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Check code formatting with black
        run: |
          black --check app/

      - name: Check import sorting with isort
        run: |
          isort --check-only app/

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run security scan with bandit
        run: |
          pip install bandit
          bandit -r app/ -f json -o bandit-report.json || true

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan
          path: bandit-report.json

  docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/envoyou-sec-api:latest
            ${{ secrets.DOCKER_USERNAME }}/envoyou-sec-api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
